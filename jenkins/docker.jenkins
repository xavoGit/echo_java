pipeline {
  agent {
    docker {
      image 'maven:3.8.1-adoptopenjdk-11'
    }
  }
  tools {
    maven 'maven-3.6.3'
  }
  options {
    skipStagesAfterUnstable()
  }
  environment {
	DATE = new Date().format('yy.M')
	TAG = "${DATE}.${BUILD_NUMBER}"
    }
    
  stages {
    stage('Get Docker') {
      steps {
        script {
	apt-get update && \
	apt-get -y install apt-transport-https \
	ca-certificates \
	curl \
	gnupg2 \
     	software-properties-common && \
	curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo "$ID")/gpg > /tmp/dkey; apt-key add /tmp/dkey && \
	add-apt-repository \
   	"deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") \
   	$(lsb_release -cs) \
   	stable" && \
	apt-get update && \
	apt-get -y install docker-ce
      }
      }
    }
  stages {
    stage('Clone repository') {
      steps {
        script {
          checkout scm
        }
      }
    }
    stage('Build') {
      steps {
        withMaven {
          sh "echo 'hi from: ' \$(hostname)"
          sh "mvn clean package"
          sh "mkdir -p target/dependency && (cd target/dependency; jar -xf ../*.jar)"
        }
      }
	}    
	stage('Docker Build') {
	  steps {
		script {
		  docker.build("echo_java:${TAG}")
        }
      }
    }
    stage('Deploy') {
      steps {
        script {
          docker.withRegistry('https://580044464645.dkr.ecr.us-east-1.amazonaws.com', 'ecr:us-east-1:aws-credentials') {
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
          }
        }
      }
    }
  }
}
